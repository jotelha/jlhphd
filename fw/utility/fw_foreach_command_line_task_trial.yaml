name: Foreach command line task trial
fws:
- fw_id: -10
  name: create files
  spec:
    _category: nemo_noqueue
    _preserve_fworker: True
    _pass_job_info: True

    local_glob_pattern: 'frame_*.lammps'
    _tasks:
    - _fw_name: CommandLineTask
      command_spec:
        command: [ touch, frame_01.lammps, frame_02.lammps, frame_03.lammps ]
 
    # get current working directory
    - _fw_name: PyTask
      func:    os.getcwd
      outputs: [ cwd ]
   
    # get os path seperator
    - _fw_name: PyTask
      func:    os.path.join
      inputs:  [ cwd, local_glob_pattern ]
      outputs: [ absolute_glob_pattern ]

    # create list of all output files [ frame_0.lammps ... frame_n.lammps ]
    - _fw_name: PyTask
      func:    glob.glob
      inputs:  [  absolute_glob_pattern ]
      outputs: [ unsorted_frame_file_list ]

    # nest list of all output files  into {"frame_file_list": [ frame_0.lammps ... frame_n.lammps ] }   
    - _fw_name: JoinDictTask
      inputs: [ unsorted_frame_file_list ]
      output: nested_unsorted_frame_file_list

    # create list of nested dicts of all output files 
    # [ { source: { type: data, value: frame_0.lammps } } ... { source: { type: data, value: frame_n.lammps } } ]
    # ugly utilization of eval: eval(expression,globals,locals) has empty globals {} 
    # and the content of "nested_frame_file_list", i.e. {"frame_file_list": [ frame_0.lammps ... frame_n.lammps ] }
    # handed as 2nd and 3rd positional argument. Knowledge about the internal PyTask function call is necessary here.
    #- _fw_name: PyTask
    #  func:    eval
    #  args:    [ '[ { "source": {"type":"data","value":f, "frame": int(f[ f.rfind("_")+1:f.rfind(".") ]) } } for f in unsorted_frame_file_list ]', {} ]
    #  inputs:  [ nested_unsorted_frame_file_list ]
    #  outputs: [ unsorted_frame_file_dict_list ]

    - _fw_name: PyTask
      func:    eval
      args:    [ '[ int(f[ f.rfind("_")+1:f.rfind(".") ]) for f in unsorted_frame_file_list ]', {} ]
      inputs:  [ nested_unsorted_frame_file_list ]
      outputs: [ unsorted_frame_index_list ]

    # nest list of frame indices into {"unsorted_frame_index_list": [ 0 ... n ] }   
    - _fw_name: JoinDictTask
      inputs: [ unsorted_frame_index_list, unsorted_frame_file_list ]
      output: nested_unsorted_frame_file_list

    - _fw_name: PyTask
      func:    eval
      # args:    [ '{ "indexed_frame_file_dict" : { str(i): { "source": {"type": "data", "value": f, "frame": i } } for i,f in zip(unsorted_frame_index_list,unsorted_frame_file_list) } }', {} ]
      # The following doe snot work:
      args:    [ '{ "indexed_frame_file_dict" : { str(i): {"type": "data", "value": f, "frame": i } for i,f in zip(unsorted_frame_index_list,unsorted_frame_file_list) } }', {} ]
      inputs:  [ nested_unsorted_frame_file_list ]
      outputs: [ nested_indexed_frame_file_dict ]

    - _fw_name: PyTask
      func:    eval
      args:    [ '[ { "type": "data", "value": k} for k in sorted(indexed_frame_file_dict.keys()) ]', {} ]
      inputs:  [ nested_indexed_frame_file_dict ]
      outputs: [ frame_index_dict_list ]

    # create list of nested dicts of all output files 
    # [ { source: { type: data, value: frame_0.lammps } } ... { source: { type: data, value: frame_n.lammps } } ]
    # ugly utilization of eval: eval(expression,globals,locals) has empty globals {} 
    # and the content of "nested_frame_file_list", i.e. {"frame_file_list": [ frame_0.lammps ... frame_n.lammps ] }
    # handed as 2nd and 3rd positional argument. Knowledge about the internal PyTask function call is necessary here.
    - _fw_name: PyTask
      func:    eval
      args:    [ '[ v for k,v in sorted(indexed_frame_file_dict.items()) ]', {} ]
      inputs:  [ nested_indexed_frame_file_dict ]
      outputs: [ frame_file_dict_list ]

    - _fw_name: PyTask
      func:    eval
      args:    [ '[ k for k,v in sorted(indexed_frame_file_dict.items()) ]', {} ]
      inputs:  [ nested_indexed_frame_file_dict ]
      outputs: [ frame_index_list ]

    - _fw_name: ForeachTask
      chunk index spec: chunk_id
      split: [ frame_file_dict_list, frame_index_dict_list ]
      task:
      - _fw_name: CommandLineTask
        command_spec:
          command:         [ ls, -lha ]
          # does not work: nested in list
          # frame_file_dict_list: { source: frame_file_dict_list }
          frame_file_dict_list: 
            source: frame_file_dict_list
          meta_file_list:  
            source: { type: stdout }
            target: { type: path, value: file_attributes.txt }
        inputs:  [ frame_file_dict_list ]
        outputs: [ meta_file_list ]
      - _fw_name: CommandLineTask
        command_spec:
          command:         [ echo, -n ]
          frame_index_dict_list: 
            source: frame_index_dict_list
          frame_index_processed:  
            source: { type: stdout }
            target: { type: data }
        inputs:  [ frame_index_dict_list ]
        outputs: [ frame_index_processed ]

- fw_id: -20
  name: process files
  spec:
    _category: nemo_noqueue
    _pass_job_info: True
    _preserve_fworker: True
    _tasks:
    - _fw_name: ForeachTask
      split: meta_file_list
      task:
      - _fw_name: CommandLineTask
        command_spec:
          command:         [ cat ]
          meta_file_list: 
            source: meta_file_list
          meta_file_content_list:  
            source: { type: stdout }
            target: { type: data }
          
        inputs:  [ meta_file_list  ]
        outputs: [ meta_file_content_list ]

- fw_id: -30
  name: retrieve files
  spec:
    _category: nemo_noqueue
    _preserve_fworker: True
    _pass_job_info: True
    _tasks:
    - _fw_name: ScriptTask
      script: 'echo "Done!"'
      use_shell: True
                    
links:
  '-10':
  - -20
  '-20':
  - -30

metadata: {}
