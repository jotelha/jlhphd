{% extends "fw_base.yaml" %}
{% block body %}
name: "{{ machine|default("NEMO",true) }}, {{ title }}, wrap and join"
spec:
  _category: {{ worker|default("nemo_noqueue",true) }}
  _queueadapter:
    {{ render_queueadapter()|safe|indent(4) }}

  _files_in:
    data_file:  datafile.lammps
  _files_out:
    data_file:   default.lammps
  _tasks:

  - _fw_name: CommandLineTask
    command_spec:
      command: [ strip_comments.py, datafile.lammps, datafile_stripped.lammps ]
      strip_comments_stdout_file:
        source: { type: stdout }
        target: { type: path, value: strip_comments.out }
      strip_comments_stderr_file:
        source: { type: stderr }
        target: { type: path, value: strip_comments.err }
    outputs:
    - strip_comments_stdout_file
    - strip_comments_stderr_file
    env: python

  - _fw_name: CommandLineTask
    command_spec:
      command: [ extract_bb.py, datafile_stripped.lammps, bb.yaml ]
      extract_bb_stdout_file:
        source: { type: stdout }
        target: { type: path, value: extract_bb.out }
      extract_bb_stderr_file:
        source: { type: stderr }
        target: { type: path, value: extract_bb.err }
    outputs:
    - extract_bb_stdout_file
    - extract_bb_stderr_file
    env: python

  - _fw_name: ScriptTask
    script: |
      echo "package require jlhvmd"
      echo "jlh set interfaceInfile datafile.lammps"
      echo "jlh use {{ surfactant }}"
      echo "jlh read bb bb.yaml"
      echo "jlh init"
      echo "jlh set outputPrefix unwrapped"
      echo "jlh render nonsolvent"
      echo "jlh wrap atom"
      echo "jlh set outputPrefix unjoint"
      echo "jlh render nonsolvent"
      echo "jlh join residue"
      echo "jlh set outputPrefix wrapped"
      echo "jlh write"
      echo "jlh render nonsolvent"
    stdout_file: in.tcl
    stderr_file: in.tcl.err
    use_shell: true
    fizzle_bad_rc: true

  - _fw_name: CmdTask
    cmd: vmd
    opt:
    - -eofexit
    - -e
    - in.tcl
    stderr_file: vmd.err
    stdout_file: vmd.out
    use_shell: true
    fizzle_bad_rc: true

  # on JUWELS, module setup via Python/CommandLineTask does not work yet properly
  # - _fw_name: CommandLineTask
  #  command_spec:
  #    command: [ vmd, -eofexit, -e, in.tcl ]
  #    vmd_stdout_file:
  #      source: { type: stdout }
  #      target: { type: path, value: vmd.out }
  #    vmd_stderr_file:
  #      source: { type: stderr }
  #      target: { type: path, value: vmd.err }
  #  outputs:
  #  - vmd_stdout_file
  #  - vmd_stderr_file
  #  env: python

  - _fw_name: CommandLineTask
    command_spec:
      command: [ convert, unwrapped.tga, unwrapped.png ]
      convert_unwrapped_stdout_file:
        source: { type: stdout }
        target: { type: path, value: convert_unwrapped.out }
      convert_unwrapped_stderr_file:
        source: { type: stderr }
        target: { type: path, value: convert_unwrapped.err }
    outputs:
    - convert_unwrapped_stdout_file
    - convert_unwrapped_stderr_file
    env: python

  - _fw_name: CommandLineTask
    command_spec:
      command: [ convert, unjoint.tga, unjoint.png ]
      convert_unjoint_stdout_file:
        source: { type: stdout }
        target: { type: path, value: convert_unjoint.out }
      convert_unjoint_stderr_file:
        source: { type: stderr }
        target: { type: path, value: convert_unjoint.err }
    outputs:
    - convert_unjoint_stdout_file
    - convert_unjoint_stderr_file
    env: python

  - _fw_name: CommandLineTask
    command_spec:
      command: [ convert, wrapped.tga, wrapped.png ]
      convert_stdout_file:
        source: { type: stdout }
        target: { type: path, value: convert.out }
      convert_stderr_file:
        source: { type: stderr }
        target: { type: path, value: convert.err }
    outputs:
    - convert_stdout_file
    - convert_stderr_file
    env: python

  # merge.py called with
  # positional arguments:
  # datafile.lammps       LAMMPS data file to process.
  # reffile.lammps        Reference data file containing complete system.
  # outfile.lammps        Merged output data file.
  - _fw_name: CommandLineTask
    command_spec:
      command: [ merge.py, wrapped.lammps, datafile.lammps, default.lammps ]
      merge_stdout_file:
        source: { type: stdout }
        target: { type: path, value: merge.out }
      merge_stderr_file:
        source: { type: stderr }
        target: { type: path, value: merge.err }
    outputs:
    - merge_stdout_file
    - merge_stderr_file
    env: python

  metadata:
    state: wrapping and rejoining
    {{ render_metadata()|indent(4)}}
{% endblock %}
