{% extends "fw_base.yaml" %}
{% block body %}
name: {{ machine|default("NEMO",true) }}, {{ title }}, frame restauration and storage
spec:
  _category: {{ worker|default("nemo_noqueue",true) }}
  _files_in:
    reference_file:   reference.lammps

  _files_out:
    frame_file:       restored.lammps

  # netcdf2data.py writes file named frame_0.lammps ... frame_n.lammps
  _tasks:
  # split workflow tree into branches here
  - _fw_name: ForeachTask
    split: [ sorted_frame_index_dict_list, sorted_frame_file_dict_list ]
    task:
    # store frame index in metadata and push to specs in order to preserve
    # processing order of frames for subsequent fireworks
    - _fw_name: PyTask
      func: eval
      args:
      - >-
        __import__("fireworks").core.firework.FWAction(
          mod_spec={
            "_set":  {"metadata->frame_index": value },
            "_push": {"processed_frame_index_list": value}
          }
        )
      - {}
      inputs: [ sorted_frame_index_dict_list ]

      # compute position from metadata and update metadata
    - _fw_name: PyTask
      func: eval
      args:
      - >-
        __import__("fireworks").core.firework.FWAction(
          mod_spec={
            "_set":{
              "metadata->in_lateral_displacement": round( float(frame_index) * float(netcdf_frequency) * float(time_step) * float(constant_indenter_velocity), 6 ),
              "metadata->ellapsed_time_steps": int(frame_index) * int(netcdf_frequency),
              "metadata->ellapsed_time": round( float(frame_index) * float(netcdf_frequency) * float(time_step), 2 )
            }
          }
        )
      - {}
      inputs: [ metadata ]


    # push metadata to subsequent fireworks
    - _fw_name: PyTask
      func: eval
      args:
      - >-
        __import__("fireworks").core.firework.FWAction(
          mod_spec={
            "_push": {"processed_metadata_list": locals() }
          }
        )
      - {}
      inputs: [ metadata ]

      # merge.py called with
      # positional arguments:
      # datafile.lammps       LAMMPS data file to process. (default: 377_SDS_on_AU_1
      #                       11_51x30x2_monolayer_with_counterion_100Ang_stepped.la
      #                       mmps)
      # reffile.lammps        Reference data file containing complete system
      #                       information. (default: 377_SDS_on_AU_111_51x30x2_monol
      #                       ayer_with_counterion_psfgen.data)
      # outfile.lammps        Merged output data file. (default: 377_SDS_on_AU_111_5
      #                       1x30x2_monolayer_with_counterion_100Ang_stepped_parame
      #                       trized.lammps)
    - _fw_name: CommandLineTask
      command_spec:
        command:         [ merge.py ]
        sorted_frame_file_dict_list:
          source : sorted_frame_file_dict_list
        reference_file_dict:
          source: { type: path, value: reference.lammps }
        restored_frame_file_dict_list:
          target: { type: path, value: restored.lammps }

        # put output both to file and in database
        merge_stdout_file: { source: { type: stdout }, target: { type: path, value: merge.out } }
        merge_stderr_file: { source: { type: stderr }, target: { type: path, value: merge.err } }

      inputs:  [ sorted_frame_file_dict_list, reference_file_dict ]
      outputs:
      - restored_frame_file_dict_list
      - merge_stdout_file
      - merge_stderr_file
      # why do these outputs not work properly?
      env: python

    - _fw_name: PyTask
      func: eval
      args:
      - >-
        __import__("fireworks").utilities.filepad.FilePad.auto_load().add_file(
          "restored.lammps",
          identifier = (
            str(type) + '/' +
            'probe/' +
              str(indenter["substrate"]) + '/' +
              str(indenter["crystal_plane"]) + '/' +
              str(indenter["initial_radius"]) +
              str(indenter["initial_radius_unit"]) + '/' +
              str(indenter["quenching_time_span"]) +
              str(indenter["quenching_time_span_unit"]) + '/' +
            'substrate/' +
              str(substrate) + '/' +
              str(sb_crystal_plane) + '/' +
              str(sb_base_length) +
              str(sb_base_length_unit) + '/' +
              str(sb_shape) + '/' +
            'surfactant/' +
              str(surfactant) + '/' +
              str(sf_nmolecules) + '/' +
              str(sf_preassembly) + '/' +
            'approach/' +
              str(approach["sb_in_dist"]) +
              str(sb_in_dist_unit) + '/' +
              str(approach["constant_indenter_velocity"]) +
              str(constant_indenter_velocity_unit) + '/' +
            'shear/' +
              str(sb_in_dist) +
              str(sb_in_dist_unit) + '/' +
              str(constant_indenter_velocity) +
              str(constant_indenter_velocity_unit) + '/' +
              str(direction_of_linear_movement) + '/' +
              str(in_lateral_displacement) +
              str(std_spatial_unit) + '/' +
            str(step) + '/' +
            str(workflow_creation_date) + '/'+
            'default.lammps' ),
          metadata=locals()
        )
      - {}
      inputs: [ metadata ]
      outputs: [ object_id, file_identifier ]

  metadata:
    state: extract frames
    {{ render_metadata()|indent(4)}}
{% endblock %}
