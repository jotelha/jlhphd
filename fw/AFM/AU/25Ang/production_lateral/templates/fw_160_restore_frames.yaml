{% extends "fw_base.yaml" %}
{% block body %}
name: {{ machine|default("NEMO",true) }}, {{ title }}, frame restauration and storage
spec:
  _category: {{ worker|default("nemo_noqueue",true) }}
  _files_in:
    reference_file:   reference.lammps

  _files_out:
    frame_file:       default.lammps

  # netcdf2data.py writes file named frame_0.lammps ... frame_n.lammps
  _tasks:
  # split workflow tree into branches here
  - _fw_name: ForeachTask
    split: [ sorted_frame_index_dict_list, sorted_frame_file_dict_list ]
    task:
    # store frame index in metadata and push to specs in order to preserve
    # processing order of frames for subsequent fireworks
    - _fw_name: PyTask
      func: eval
      args:
      - >-
        __import__("fireworks").core.firework.FWAction(
          mod_spec={
            "_set":  {"metadata->frame_index": value },
            "_push": {"processed_frame_index_list": value}
          }
        )
      - {}
      inputs: [ sorted_frame_index_dict_list ]

      # compute position from metadata and update metadata
    - _fw_name: PyTask
      func: eval
      args:
      - >-
        __import__("fireworks").core.firework.FWAction(
          mod_spec={
            "_set":{
              "metadata->in_lateral_displacement": round( float(frame_index) * float(netcdf_frequency) * float(time_step) * float(constant_indenter_velocity), 6 ),
              "metadata->ellapsed_time_steps": int(frame_index) * int(netcdf_frequency),
              "metadata->ellapsed_time": round( float(frame_index) * float(netcdf_frequency) * float(time_step), 2 )
            }
          }
        )
      - {}
      inputs: [ metadata ]


    # push metadata to subsequent fireworks
    - _fw_name: PyTask
      func: eval
      args:
      - >-
        __import__("fireworks").core.firework.FWAction(
          mod_spec={
            "_push": {"processed_metadata_list": locals() }
          }
        )
      - {}
      inputs: [ metadata ]

    # restore missing data (i.e. topology info)

    # merge.py called with
    # positional arguments:
    # datafile.lammps       LAMMPS data file to process.
    # reffile.lammps        Reference data file containing complete system.
    # outfile.lammps        Merged output data file.
    - _fw_name: CommandLineTask
      command_spec:
        command:         [ merge.py ]
        sorted_frame_file_dict_list:
          source : sorted_frame_file_dict_list
        reference_file_dict:
          source: { type: path, value: reference.lammps }
        restored_frame_file_dict_list:
          target: { type: path, value: restored.lammps }

        merge_stdout_file:
          source: { type: stdout }
          target: { type: path, value: merge.out }
        merge_stderr_file:
          source: { type: stderr }
          target: { type: path, value: merge.err }

      inputs:  [ sorted_frame_file_dict_list, reference_file_dict ]
      outputs:
      - restored_frame_file_dict_list
      - merge_stdout_file
      - merge_stderr_file
      env: python

    # extract bounding box for vmd processing
    - _fw_name: CommandLineTask
      command_spec:
        command: [ extract_bb.py, restored.lammps, bb.yaml ]
        extract_bb_stdout_file:
          source: { type: stdout }
          target: { type: path, value: extract_bb.out }
        extract_bb_stderr_file:
          source: { type: stderr }
          target: { type: path, value: extract_bb.err }
      outputs:
      - extract_bb_stdout_file
      - extract_bb_stderr_file
      env: python

    # prepare vmd input script
    - _fw_name: ScriptTask
      script: |
        echo "package require jlhvmd"
        echo "jlh set interfaceInfile restored.lammps"
        echo "jlh use {{ surfactant }}"
        echo "jlh read bb bb.yaml"
        echo "jlh init"
        echo "jlh set outputPrefix unwrapped"
        echo "jlh render nonsolvent"
        echo "jlh wrap atom"
        echo "jlh set outputPrefix unjoint"
        echo "jlh render nonsolvent"
        echo "jlh join residue"
        echo "jlh set outputPrefix wrapped"
        echo "jlh write"
        echo "jlh render nonsolvent"
      stdout_file: in.tcl
      stderr_file: in.tcl.err
      use_shell: true
      fizzle_bad_rc: true

    # run vmd to wrap into one periodic image and subsequently connect resiudes
    # also removes image flags (vmd topotools side effect)
    - _fw_name: CommandLineTask
      command_spec:
        command: [ vmd, -eofexit, -e, in.tcl ]
        vmd_stdout_file:
          source: { type: stdout }
          target: { type: path, value: vmd.out }
        vmd_stderr_file:
          source: { type: stderr }
          target: { type: path, value: vmd.err }
      outputs:
      - vmd_stdout_file
      - vmd_stderr_file
      env: python

    # render a few images at different stages for "visual debugging"
    - _fw_name: CommandLineTask
      command_spec:
        command: [ convert, unwrapped.tga, unwrapped.png ]
        convert_unwrapped_stdout_file:
          source: { type: stdout }
          target: { type: path, value: convert_unwrapped.out }
        convert_unwrapped_stderr_file:
          source: { type: stderr }
          target: { type: path, value: convert_unwrapped.err }
      outputs:
      - convert_unwrapped_stdout_file
      - convert_unwrapped_stderr_file
      env: python

    - _fw_name: CommandLineTask
      command_spec:
        command: [ convert, unjoint.tga, unjoint.png ]
        convert_unjoint_stdout_file:
          source: { type: stdout }
          target: { type: path, value: convert_unjoint.out }
        convert_unjoint_stderr_file:
          source: { type: stderr }
          target: { type: path, value: convert_unjoint.err }
      outputs:
      - convert_unjoint_stdout_file
      - convert_unjoint_stderr_file
      env: python

    - _fw_name: CommandLineTask
      command_spec:
        command: [ convert, wrapped.tga, wrapped.png ]
        convert_stdout_file:
          source: { type: stdout }
          target: { type: path, value: convert.out }
        convert_stderr_file:
          source: { type: stderr }
          target: { type: path, value: convert.err }
      outputs:
      - convert_stdout_file
      - convert_stderr_file
      env: python

    # restore lost information (i.e. velocities, mis-mapped types, etc. once again)

    # merge.py called with
    # positional arguments:
    # datafile.lammps       LAMMPS data file to process.
    # reffile.lammps        Reference data file containing complete system.
    # outfile.lammps        Merged output data file.
    - _fw_name: CommandLineTask
      command_spec:
        command: [ merge.py, wrapped.lammps, restored.lammps, default.lammps ]
        merge_stdout_file:
          source: { type: stdout }
          target: { type: path, value: merge.out }
        merge_stderr_file:
          source: { type: stderr }
          target: { type: path, value: merge.err }
      outputs:
      - merge_stdout_file
      - merge_stderr_file
      env: python

    # store as a new initial configuration in database
    - _fw_name: PyTask
      func: eval
      args:
      - >-
        __import__("fireworks").utilities.filepad.FilePad.auto_load().add_file(
          "default.lammps",
          identifier = (
            str(type) + '/' +
            'probe/' +
              str(indenter["substrate"]) + '/' +
              str(indenter["crystal_plane"]) + '/' +
              str(indenter["initial_radius"]) +
              str(indenter["initial_radius_unit"]) + '/' +
              str(indenter["quenching_time_span"]) +
              str(indenter["quenching_time_span_unit"]) + '/' +
            'substrate/' +
              str(substrate) + '/' +
              str(sb_crystal_plane) + '/' +
              str(sb_base_length) +
              str(sb_base_length_unit) + '/' +
              str(sb_shape) + '/' +
            'surfactant/' +
              str(surfactant) + '/' +
              str(sf_nmolecules) + '/' +
              str(sf_preassembly) + '/' +
            'approach/' +
              str(approach["sb_in_dist"]) +
              str(sb_in_dist_unit) + '/' +
              str(approach["constant_indenter_velocity"]) +
              str(constant_indenter_velocity_unit) + '/' +
            'shear/' +
              str(sb_in_dist) +
              str(sb_in_dist_unit) + '/' +
              str(constant_indenter_velocity) +
              str(constant_indenter_velocity_unit) + '/' +
              str(direction_of_linear_movement) + '/' +
              str(in_lateral_displacement) +
              str(std_spatial_unit) + '/' +
            str(step) + '/' +
            str(workflow_creation_date) + '/'+
            'default.lammps' ),
          metadata=locals()
        )
      - {}
      inputs: [ metadata ]
      outputs: [ object_id, file_identifier ]

  metadata:
    state: extract frames
    {{ render_metadata()|indent(4)}}
{% endblock %}
