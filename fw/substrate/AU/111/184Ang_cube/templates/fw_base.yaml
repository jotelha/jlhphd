{#
# sample identifier: AFM/SDS/646/AU/111/52x30x2/hemicylinders/50Ang/stepped/30Ang/1500000
# identifier composition:
#                        ^surfactant            ^initial config
#                            ^surfactant molcules             ^indenter name (not real measures)
#                                ^substrate material                ^indenter structure
#                                   ^substrate crytal plane                 ^initial indenter substrate distance
#                                       ^substrate unit cell multiples            ^steps to contact
#
# regular expression to turn metadata into placholder lines:
#   pattern:      ^([[:space:]]+)([^:[:space:]]+):([[:space:]]+)[^[:space:]]+.*$
#   replacement:  \1\2:\3{{ \2 }}
#}
{# identifier for results, used as sub-path AND as filepad prefix #}
{%- set identifier = "substrate/%s/%s/%s%s/%s/%s/%s"|format(
  substrate,
  sb_crystal_plane,
  sb_base_length,
  sb_base_length_unit,
  sb_shape,
  step,
  "now"|datetime('%Y%m%d%H%M') ) -%}
{# descriptive natural language title for display purposes #}
{%- set title = "substrate %s"|format(sb_name) -%}
{# depending on machine, different queue settings are necessary #}
{# JUWELS uses SLURM, NEMO MOAB #}
{%- macro render_queueadapter() -%}
{%- if machine is in ['NEMO'] -%}
nodes:            {{ nodes|default(1,true)|int }}
ppn:              {{ ppn|default(20,true)|int }}
queue:            {{ queue|default('',true) }}
walltime:         {{ walltime|default("12:00:00") }}
{%- elif machine is in ['JUWELS'] -%}
account:          {{ account|default("hfr13") }}
cpus_per_task:    {{ cpus_per_task|default(1,true)|int }}
ntasks_per_node:  {{ ntasks_per_node|default(96,true)|int }}
ntasks:           {{ ntasks|default(96,true)|int }}
queue:            {{ queue|default("batch") }}
walltime:         {{ walltime|default("12:00:00") }}
{%- endif -%}
{%- endmacro -%}

{%- if worker is in ['juwels_noqueue'] -%}
{%- set smb_port_provider = "localhost" -%}
{%- set smb_port_local    = "$(cat .port)" -%}
{%- else -%}
{%- set smb_port_provider = smb_host|default("ufr2.isi1.public.ads.uni-freiburg.de",true) -%}
{%- set smb_port_local    = smb_port -%}
{%- endif -%}

{# JUWELS and bwCloud have to transfer results via ssh port forwarding to RZ storage #}
{# for this purpose, a background task can establish the ssh connection #}
{%- macro render_smb_forward() -%}
{%- if worker is in ['bwcloud_std','juwels_noqueue'] -%}
_background_tasks:
- _fw_name: BackgroundTask
  num_launches:  1
  run_on_finish: false
  sleep_time:    10
  tasks:
  - _fw_name: PyTask
    func:     ssh_forward.forward
    kwargs:
      remote_host:  {{ smb_host|default("ufr2.isi1.public.ads.uni-freiburg.de",true) }}
      remote_port:  {{ smb_port|default(445,true)|int }}
      ssh_host:     {{ smb_gateway|default("132.230.102.164",true) }}
      ssh_user:     {{ smb_gateway_user|default("sshclient",true) }}
      ssh_keyfile:  {{ smb_gateway_ssh_id|default("~/.ssh/sshclient-frrzvm",true) }}
      port_file:    .port
{%- endif -%}
{%- endmacro -%}

{# a simple script waiting for the ssh connection port to be allocated #}
{%- macro render_wait_for_port() -%}
{%- if worker is in ['bwcloud_std','juwels_noqueue'] -%}
- _fw_name: ScriptTask
  script: >-
    counter=0;
    while [ ! -f .port ]; do
      sleep 1;
      counter=$((counter + 1));
      if [ $counter -ge 10 ]; then
        echo "Timed out waiting for port!";
        exit 126;
      fi;
    done
  stderr_file:   wait.err
  stdout_file:   wait.out
  store_stdout:  true
  store_stderr:  true
  fizzle_bad_rc: true
  use_shell:     true
{%- endif -%}
{%- endmacro -%}

{%- macro render_metadata() -%}
# technical settings
machine:          {{ machine }}
mode:             {{ mode }}
type:             {{ type }}
step:             {{ step }}

ewald_accuracy:       {{ ewald_accuracy }}
coulomb_cutoff:       {{ coulomb_cutoff }}
coulomb_cutoff_unit:  {{ coulomb_cutoff_unit }}
skin_distance:        {{ skin_distance }}
skin_distance_unit:   {{ skin_distance_unit }}

neigh_delay:     {{ neigh_delay }}
neigh_every:     {{ neigh_every }}
neigh_check:     {{ neigh_check }}

use_barostat:    {{ use_barostat }}
use_dpd_tstat:   {{ use_dpd_tstat }}

system_name:     {{ system_name }}

force_field:                                  {{ force_field }}
pbc:                                          {{ pbc }}
pressure:                                     {{ pressure }}
pressure_unit:                                {{ pressure_unit }}
sb_name:                                      {{ sb_name }}
sb_area:                                      {{ sb_area }}
sb_area_unit:                                 {{ sb_area_unit }}
sb_base_length:                               {{ sb_base_length }}
sb_base_length_unit:                          {{ sb_base_length_unit }}
sb_crystal_plane:                             {{ sb_crystal_plane }}
sb_measures:                                  {{ sb_measures }}
sb_measures_unit:                             {{ sb_measures_unit }}
sb_normal:                                    {{ sb_normal }}
sb_shape:                                     {{ sb_shape }}
sb_thickness:                                 {{ sb_thickness }}
sb_thickness_unit:                            {{ sb_thickness_unit }}
sb_volume:                                    {{ sb_volume }}
sb_volume_unit:                               {{ sb_volume_unit }}
substrate:                                    {{ substrate }}
temperature:                                  {{ temperature }}
temperature_unit:                             {{ temperature_unit }}

workflow_creation_date:                       {{ "now"|datetime }}
{%- endmacro -%}
{%- block body -%}{%- endblock -%}
