# Appends one data file as substrate to another. Subsequently switches to 
# shrink-wrapped box and zero-aligns the system in order to have an enveloping 
# box of minimum size.
variable dataFile         index "nonSubstrate.lammps"
variable dataFileToAppend index "110_subst_new_original_offset.lammps"
variable outfile          index "merged.lammps"
# per default, assume element type 11 as susbtrate
variable substrateType    index 11 
# minimum header does not load datafile, does not define groups,
# does not enable Ewald summation and therefore does not require
# periodic box.
include lmp_minimal_header.input

read_data ${dataFile}

read_data ${dataFileToAppend} add append group substrate
# The shift keyword can be used to specify an (Sx, Sy, Sz) displacement applied
# to the coordinates of each atom. Sz must be 0.0 for a 2d simulation. This is
# a mechanism for adding structured collections of atoms at different locations
# within the simulation box, to build up a complex geometry. It is up to you to
# insure atoms do not end up overlapping unphysically which would lead to bad
# dynamics. Note that the displace_atoms command can be used to move a subset
# of atoms after they have been read from a data file. Likewise, the
# delete_atoms command can be used to remove overlapping atoms. Note that
# the shift values (Sx, Sy, Sz) are also added to the simulation box
# information (xlo, xhi, ylo, yhi, zlo, zhi) in the data file to shift its
# boundaries. E.g. xlo_new = xlo + Sx, xhi_new = xhi + Sx.

set group substrate type ${substrateType}

# "tighten" box around merged system:
change_box all boundary s s s

# zero-align system
displace_atoms all move $((-xlo)) $((-ylo)) $((-zlo)) units box

write_data ${outfile}