# PACKMOL input Jinja2 template for packing surfactant aggregates on top
# of flat substrate
#
# {{ system_name }}
# {{ header }}

# Change the maximum number of optimization loops, default 20
nloop {{ nloop|default(20,true)|int }}
# Change the maximum number of Gencan iterations per loop. default 50
maxit {{ maxit|default(50,true)|int }}

tolerance {{ "%.3f"|format(tolerance) }}

{% if movebadrandom %}
# One of the convergence heuristics of Packmol consists in moving molecules
# that are badly placed. If this option is set, the molecules will be placed
# in new random position in the box. If not (default), the molecules are
# moved to positions nearby molecules that are well packed. Using this
# option can help when the restraints are complex, but will probably be bad
# if there are large structures, because the new random position might overlap
# with those.
movebadrandom
{% endif %}

# Coordinate file types will be in pdb format (keyword not required for
# pdb file format, but required for tinker, xyz or moldy).

filetype pdb

output {{ system_name }}_packmol.pdb

{% if write_restart %}
restart_to {{ system_name }}_restart.pack
{% endif %}

# substrate
structure {{ sb_name }}.pdb
  number 1
  resnumbers 2
  #center 
  fixed {{ "%.3f"|format(sb_pos[0]) }} {{ "%.3f"|format(sb_pos[1]) }} {{ "%.3f"|format(sb_pos[2]) }} 0. 0. 0.
end structure

{% for monolayer in monolayers %} 

# monolayer examples:

# SDS monolayer: the polar head is oriented downwards, tail upwards.
# {{ monolayer.N }} lipids are be placed within a monolayer bounding box.
# Atom {{ monolayer.lower_atom_number }} of SDS .pdb file (e.g. sulfur, which belongs to 
# polar head), will be constrained below plane z < {{ monolayer.lower_constraint_plane }}.
# Atom {{ monolayer.upper_atom_number }}, (e.g. hydrophobic tail of the hydrocarbon chain), 
# will be constrained above plane z > {{ monolayer.upper_constraint_plane }}. Therefore, 
# all lipids will be like-oriented, distributed randomly and non-overlapping 
# within bounding box.

# CTAB monolayer: the polar head is oriented downwards, tail upwards.
# {{ monolayer.N }} lipids are be placed within a monolayer bounding box.
# Atom {{ monolayer.lower_atom_number }} of CTAB .pdb file (e.g. nitrogen, which belongs to 
# polar head), will be constrained below plane z < {{ monolayer.lower_constraint_plane }}.
# Atom {{ monolayer.upper_atom_number }}, (e.g. hydrophobic tail of the hydrocarbon chain), 
# will be constrained above plane z > {{ monolayer.upper_constraint_plane }}. Therefore, 
# all lipids will be like-oriented, distributed randomly and non-overlapping 
# within bounding box.
structure 1_{{ monolayer.surfactant }}.pdb 
  chain A
  resnumbers 2
  number {{ monolayer.N|int }}
  inside box {{ "%.3f"|format(monolayer.bb_lower[0]) }} {{ "%.3f"|format(monolayer.bb_lower[1]) }} {{ "%.3f"|format(monolayer.bb_lower[2]) }}  {{ "%.3f"|format(monolayer.bb_upper[0]) }}  {{ "%.3f"|format(monolayer.bb_upper[1]) }} {{ "%.3f"|format(monolayer.bb_upper[2]) }}
  atoms {{ monolayer.lower_atom_number|int }}
    below plane 0. 0. 1. {{ "%.3f"|format(monolayer.lower_constraint_plane) }}
  end atoms
  atoms {{ monolayer.upper_atom_number|int }}
    over plane 0. 0. 1. {{ "%.3f"|format(monolayer.upper_constraint_plane) }}
  end atoms
  {% if write_restart %}
    restart_to {{ system_name }}_monolayer_{{ "%03d"|format(loop.index0) }}_restart.pack
  {% endif %}
end structure
{% endfor %}

{% for cylinder in cylinders %}
structure 1_{{ cylinder.surfactant }}.pdb
  nloop 200
  chain A
  resnumbers 2
  number {{ cylinder.N|int }}
  # along x axis
  inside cylinder {{ "%.3f"|format(cylinder.base_center[0]) }} {{ "%.3f"|format(cylinder.base_center[1]) }} {{ "%.3f"|format(cylinder.base_center[2]) }} 1. 0. 0. {{ "%.3f"|format(cylinder.radius) }} {{ "%.3f"|format(cylinder.length) }}

  {% if cylinder.upper_hemi %}
  over plane 0. 0. 1. {{ "%.3f"|format(cylinder.base_center[2]) }}
  {% elif cylinder.lower_hemi %}
  below plane 0. 0. 1. {{ "%.3f"|format(cylinder.base_center[2]) }}
  {% endif %}
  
  atoms {{ cylinder.outer_atom_number|int }}
    outside cylinder {{ "%.3f"|format(cylinder.base_center[0]) }} {{ "%.3f"|format(cylinder.base_center[1]) }} {{ "%.3f"|format(cylinder.base_center[2]) }} 1. 0. 0. {{ "%.3f"|format(cylinder.outer_constraint_radius) }} {{ "%.3f"|format(cylinder.length) }}
  end atoms
  atoms {{ cylinder.inner_atom_number|int }}
    inside cylinder {{ "%.3f"|format(cylinder.base_center[0]) }} {{ "%.3f"|format(cylinder.base_center[1]) }} {{ "%.3f"|format(cylinder.base_center[2]) }} 1. 0. 0. {{ "%.3f"|format(cylinder.inner_constraint_radius) }} {{ "%.3f"|format(cylinder.length) }}
  end atoms
  {% if write_restart %}
    restart_to {{ system_name }}_cylinder_{{ "%03d"|format(loop.index0) }}_restart.pack
  {% endif %}
end structure
{% endfor %}

# point paricles, generally ions
{% for ionlayer in ionlayers %}
structure 1_{{ ionlayer.ion }}.pdb 
  chain A
  resnumbers 2
  number {{ ionlayer.N|int }}
  inside box {{ "%.3f"|format(ionlayer.bb_lower[0]) }} {{ "%.3f"|format(ionlayer.bb_lower[1]) }} {{ "%.3f"|format(ionlayer.bb_lower[2]) }}  {{ "%.3f"|format(ionlayer.bb_upper[0]) }}  {{ "%.3f"|format(ionlayer.bb_upper[1]) }} {{ "%.3f"|format(ionlayer.bb_upper[2]) }}
  {% if write_restart %}
    restart_to {{ system_name }}_ionlayer_{{ "%03d"|format(loop.index0) }}_restart.pack
  {% endif %}
end structure
{% endfor %}

# ions outside cylinder
{% for ioncylinder in ioncylinders %}
structure 1_{{ ioncylinder.ion }}.pdb
  chain A
  resnumbers 2
  number {{ ioncylinder.N|int }}
  # along x axis
  inside cylinder {{ "%.3f"|format(ioncylinder.base_center[0]) }} {{ "%.3f"|format(ioncylinder.base_center[1]) }} {{ "%.3f"|format(ioncylinder.base_center[2]) }} 1. 0. 0. {{ "%.3f"|format(ioncylinder.outer_radius) }} {{ "%.3f"|format(ioncylinder.length) }}
  outside cylinder {{ "%.3f"|format(ioncylinder.base_center[0]) }} {{ "%.3f"|format(ioncylinder.base_center[1]) }} {{ "%.3f"|format(ioncylinder.base_center[2]) }} 1. 0. 0. {{ "%.3f"|format(ioncylinder.inner_radius) }} {{ "%.3f"|format(ioncylinder.length) }}
  {% if ioncylinder.upper_hemi %}
  over plane 0. 0. 1. {{ "%.3f"|format(ioncylinder.base_center[2]) }}
  {% elif ioncylinder.lower_hemi %}
  below plane 0. 0. 1. {{ "%.3f"|format(ioncylinder.base_center[2]) }}
  {% endif %}
  {% if write_restart %}
    restart_to {{ system_name }}_ioncylinder_{{ "%03d"|format(loop.index0) }}_restart.pack
  {% endif %}
end structure
{% endfor %}
